111111111111111111111  11111111111111111111
100000000000000000001111000000010000000001
1000000N0000000000000000000000010000000001
100000000000000000011100000000000000000001
10000000000000000001 100000000010000000001
11111110000000001111 100000000010000000001
   1000000000000111111111111111110000000011111
   100000000000000000000001    10000000000001
   100000000000000000000001    10000000000001
   111111111111111111111111    11111111111111



Entity - integer ID
   - objects in the world
Component - struct of values
   - attached to an entity
   - position component: {4.2f, 0.3f, -2.4f} -> 5
System - working with entities that has at least a set of components
   - displacement system: updating entities that have Position Component and Velocity Component

Rotational Component:
   - float rotational_speed
   - vec3 axis
Mass Component:
   - float mass;
Energy Component:
   - float joules;
Position Component:
   - vec3 position;


vec3 position;
position.x + velocity.x * dt > 0
velocity.x *= -1;

Gravity System
Momentum System
Displacement System
map of entities
position += velocity * dt;
Energy System -> Energy Component, Momentum Component
if (collided with wall)
{
   updating energy
}
updating velocity based on energy

Rotational System
if (collided with wall)
{
   updating rotational speed
}
angle += rotational_speed;

OpenGL - specification for Graphics API implemented by GPU provider

VertexBuffer - array of vertices
Vertex:
[vec3 position, vec3 normal, vec2 texture] * 3

Rendering Pipeline
Shader: GPU program
1. VertexShader -> 2. FragmentShader

Lerp - Linear Interpolation


(0, 1).





                  .(1, 0.2)
               
(0, 0).                    

Primitive

Mesh - set of primitives
Model - set of Meshes